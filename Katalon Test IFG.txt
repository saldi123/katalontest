import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint

import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import org.apache.kafka.clients.consumer.ConsumerConfig
import org.apache.kafka.clients.consumer.KafkaConsumer
import org.apache.kafka.clients.consumer.ConsumerRecords
import org.apache.kafka.common.serialization.StringDeserializer

import java.time.Duration
import java.util.Properties

// ================ TESTING RESTFUL API ================
TestCase('Restful API Test') {
    def apiEndpoint = 'https://jsonplaceholder.typicode.com/posts'

    // Step 1: Create data (POST request)
    def postResponse = WS.sendRequest(findTestObject('Object Repository/API/CreatePost', [('title'): 'Test', ('body'): 'This is a test body']))
    WS.verifyResponseStatusCode(postResponse, 201)
    def postId = WS.getElementPropertyValue(postResponse, 'id')

    // Step 2: Retrieve data (GET request)
    def getResponse = WS.sendRequest(findTestObject('Object Repository/API/GetPost', [('id'): postId]))
    WS.verifyResponseStatusCode(getResponse, 200)
    WS.verifyElementPropertyValue(getResponse, 'title', 'Test')

    // Step 3: Update data (PUT request)
    def putResponse = WS.sendRequest(findTestObject('Object Repository/API/UpdatePost', [('id'): postId, ('title'): 'Updated Test']))
    WS.verifyResponseStatusCode(putResponse, 200)
    WS.verifyElementPropertyValue(putResponse, 'title', 'Updated Test')

    // Step 4: Delete data (DELETE request)
    def deleteResponse = WS.sendRequest(findTestObject('Object Repository/API/DeletePost', [('id'): postId]))
    WS.verifyResponseStatusCode(deleteResponse, 200)
}

// ================ TESTING KAFKA ================
TestCase('Kafka Consumer Test') {
    // Kafka Consumer Configuration
    Properties props = new Properties()
    props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, 'localhost:9092')
    props.put(ConsumerConfig.GROUP_ID_CONFIG, 'katalon_test_group')
    props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName())
    props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName())
    props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, 'earliest')

    KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props)
    consumer.subscribe(Arrays.asList('test-topic'))

    // Consume messages
    ConsumerRecords<String, String> records = consumer.poll(Duration.ofSeconds(10))

    records.forEach(record -> {
        println("Consumed message: " + record.value())
        assert record.value().contains('Expected Content')
    })

    consumer.close()
}

// ================ OBJECT REPOSITORY SETUP ================
// Add these in Katalon Object Repository manually:

// Object: CreatePost (POST)
// - URL: https://jsonplaceholder.typicode.com/posts
// - Method: POST
// - Headers: Content-Type: application/json
// - Body: {
//     "title": "${title}",
//     "body": "${body}",
//     "userId": 1
//   }

// Object: GetPost (GET)
// - URL: https://jsonplaceholder.typicode.com/posts/${id}
// - Method: GET

// Object: UpdatePost (PUT)
// - URL: https://jsonplaceholder.typicode.com/posts/${id}
// - Method: PUT
// - Body: {
//     "id": ${id},
//     "title": "${title}",
//     "body": "Updated Body",
//     "userId": 1
//   }

// Object: DeletePost (DELETE)
// - URL: https://jsonplaceholder.typicode.com/posts/${id}
// - Method: DELETE
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint

import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import org.apache.kafka.clients.consumer.ConsumerConfig
import org.apache.kafka.clients.consumer.KafkaConsumer
import org.apache.kafka.clients.consumer.ConsumerRecords
import org.apache.kafka.common.serialization.StringDeserializer

import java.time.Duration
import java.util.Properties

// ================ TESTING RESTFUL API ================
TestCase('Restful API Test') {
    def apiEndpoint = 'https://jsonplaceholder.typicode.com/posts'

    // Step 1: Create data (POST request)
    def postResponse = WS.sendRequest(findTestObject('Object Repository/API/CreatePost', [('title'): 'Test', ('body'): 'This is a test body']))
    WS.verifyResponseStatusCode(postResponse, 201)
    def postId = WS.getElementPropertyValue(postResponse, 'id')

    // Step 2: Retrieve data (GET request)
    def getResponse = WS.sendRequest(findTestObject('Object Repository/API/GetPost', [('id'): postId]))
    WS.verifyResponseStatusCode(getResponse, 200)
    WS.verifyElementPropertyValue(getResponse, 'title', 'Test')

    // Step 3: Update data (PUT request)
    def putResponse = WS.sendRequest(findTestObject('Object Repository/API/UpdatePost', [('id'): postId, ('title'): 'Updated Test']))
    WS.verifyResponseStatusCode(putResponse, 200)
    WS.verifyElementPropertyValue(putResponse, 'title', 'Updated Test')

    // Step 4: Delete data (DELETE request)
    def deleteResponse = WS.sendRequest(findTestObject('Object Repository/API/DeletePost', [('id'): postId]))
    WS.verifyResponseStatusCode(deleteResponse, 200)
}

// ================ TESTING KAFKA ================
TestCase('Kafka Consumer Test') {
    // Kafka Consumer Configuration
    Properties props = new Properties()
    props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, 'localhost:9092')
    props.put(ConsumerConfig.GROUP_ID_CONFIG, 'katalon_test_group')
    props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName())
    props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName())
    props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, 'earliest')

    KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props)
    consumer.subscribe(Arrays.asList('test-topic'))

    // Consume messages
    ConsumerRecords<String, String> records = consumer.poll(Duration.ofSeconds(10))

    records.forEach(record -> {
        println("Consumed message: " + record.value())
        assert record.value().contains('Expected Content')
    })

    consumer.close()
}

// ================ OBJECT REPOSITORY SETUP ================
// Add these in Katalon Object Repository manually:

// Object: CreatePost (POST)
// - URL: https://jsonplaceholder.typicode.com/posts
// - Method: POST
// - Headers: Content-Type: application/json
// - Body: {
//     "title": "${title}",
//     "body": "${body}",
//     "userId": 1
//   }

// Object: GetPost (GET)
// - URL: https://jsonplaceholder.typicode.com/posts/${id}
// - Method: GET

// Object: UpdatePost (PUT)
// - URL: https://jsonplaceholder.typicode.com/posts/${id}
// - Method: PUT
// - Body: {
//     "id": ${id},
//     "title": "${title}",
//     "body": "Updated Body",
//     "userId": 1
//   }

// Object: DeletePost (DELETE)
// - URL: https://jsonplaceholder.typicode.com/posts/${id}
// - Method: DELETE
